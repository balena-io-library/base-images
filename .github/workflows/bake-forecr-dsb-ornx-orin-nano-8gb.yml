name: Bake forecr-dsb-ornx-orin-nano-8gb
'on':
  workflow_run:
    workflows:
      - Bake aarch64
    types:
      - completed
  workflow_dispatch:
    inputs:
      no-push:
        description: Do not push to DockerHub
        required: false
        type: boolean
        default: false
      cancel-in-progress:
        description: Cancel all in-progress bake workflows and only run this one
        required: false
        type: boolean
        default: false
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: ${{ inputs.cancel-in-progress == true }}
jobs:
  prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-golang:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-alpine-golang
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-alpine
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-alpine-golang.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-alpine-golang:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-alpine-golang
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-golang
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-alpine-golang.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-golang.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-node:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-alpine-node
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-alpine
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-alpine-node.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-alpine-node:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-alpine-node
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-node
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-alpine-node.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-node.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-python:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-alpine-python
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-alpine
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-alpine-python.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-alpine-python:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-alpine-python
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-python
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-alpine-python.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-alpine-python.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-debian-golang:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-debian-golang
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-debian
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian-golang.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-debian-golang:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-debian-golang
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-debian-golang
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian-golang.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-debian-golang.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-debian-node:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-debian-node
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-debian
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian-node.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-debian-node:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-debian-node
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-debian-node
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian-node.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-debian-node.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-debian-openjdk:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-debian-openjdk
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-debian
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian-openjdk.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-debian-openjdk:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-debian-openjdk
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-debian-openjdk
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian-openjdk.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-debian-openjdk.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-debian-python:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-debian-python
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-debian
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian-python.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-debian-python:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-debian-python
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-debian-python
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian-python.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-debian-python.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-golang:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-fedora-golang
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-fedora
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-fedora-golang.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-fedora-golang:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-fedora-golang
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-golang
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-fedora-golang.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-golang.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-node:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-fedora-node
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-fedora
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-fedora-node.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-fedora-node:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-fedora-node
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-node
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-fedora-node.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-node.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-python:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-fedora-python
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-fedora
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-fedora-python.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-fedora-python:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-fedora-python
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-python
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-fedora-python.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-fedora-python.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-golang:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-ubuntu-golang
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu-golang.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu-golang:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-ubuntu-golang
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-golang
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu-golang.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-golang.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-node:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-ubuntu-node
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu-node.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu-node:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-ubuntu-node
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-node
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu-node.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-node.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-python:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-ubuntu-python
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu-python.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu-python:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-ubuntu-python
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-python
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu-python.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-python.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-openjdk:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-ubuntu-openjdk
    runs-on: ubuntu-latest
    needs: bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu-openjdk.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu-openjdk:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-ubuntu-openjdk
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-openjdk
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu-openjdk.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu-openjdk.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-alpine:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-alpine
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || (github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure') }}
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-alpine.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-alpine:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-alpine
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-alpine
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-alpine.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-alpine.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-debian:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-debian
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || (github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure') }}
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-debian:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-debian
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-debian
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-debian.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-debian.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-fedora:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-fedora
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || (github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure') }}
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-fedora.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-fedora:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-fedora
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-fedora
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-fedora.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-fedora.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
  prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu:
    name: Prepare forecr-dsb-ornx-orin-nano-8gb-ubuntu
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || (github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure') }}
    outputs:
      bake-targets: ${{ steps.bake-targets.outputs.matrix }}
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu.json
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set matrix
        id: bake-targets
        run: |
          set -x
          targets="$(jq -cr '.group.default.targets' $LIBRARY)"
          echo "matrix=$targets" >> $GITHUB_OUTPUT
  bake-forecr-dsb-ornx-orin-nano-8gb-ubuntu:
    name: Bake forecr-dsb-ornx-orin-nano-8gb-ubuntu
    runs-on:
      - self-hosted
      - base-images
      - ARM64
    timeout-minutes: 240
    needs: prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu
    env:
      LIBRARY: library/forecr-dsb-ornx-orin-nano-8gb-ubuntu.json
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prepare-forecr-dsb-ornx-orin-nano-8gb-ubuntu.outputs.bake-targets) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb
        with:
          driver-opts: network=host
          install: true
      - name: Setup QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.0.4-33
        if: contains(steps.setup-buildx.outputs.platforms, 'linux/arm64') == false
      - name: Login to DockerHub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        if: inputs.no-push != true
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Set the DATESTAMP variable
        run: echo "DATESTAMP=$(date +%Y%m%d)" >> "${GITHUB_ENV}"
      - name: Docker bake
        continue-on-error: false
        id: docker_bake
        uses: docker/bake-action@7a5dfed3550ca014665af2a27af8fc9d7284b9b3
        with:
          workdir: balena-base-images
          files: ${{ github.workspace }}/${{ env.LIBRARY }}
          targets: ${{ matrix.target }}
          push: ${{ inputs.no-push != true }}
          provenance: false
