# DO NOT EDIT MANUALLY - This file is auto-generated from bashbrew.json

name: Bashbrew (aarch64)
'on':
  schedule:
    - cron: 45 3 6 * *
  workflow_dispatch:
    inputs:
      target_job:
        description: Target job to run
        required: true
        type: choice
        default: all
        options:
          - all
          - aarch64-alpine
          - aarch64-alpine-golang
          - aarch64-alpine-node
          - aarch64-alpine-openjdk
          - aarch64-alpine-python
          - aarch64-debian
          - aarch64-debian-golang
          - aarch64-debian-node
          - aarch64-debian-openjdk
          - aarch64-debian-python
          - aarch64-fedora
          - aarch64-fedora-golang
          - aarch64-fedora-node
          - aarch64-fedora-openjdk
          - aarch64-fedora-python
          - aarch64-ubuntu
          - aarch64-ubuntu-golang
          - aarch64-ubuntu-node
          - aarch64-ubuntu-openjdk
          - aarch64-ubuntu-python
          - coral-dev-alpine
          - coral-dev-alpine-golang
          - coral-dev-alpine-node
          - coral-dev-alpine-openjdk
          - coral-dev-alpine-python
          - coral-dev-debian
          - coral-dev-debian-golang
          - coral-dev-debian-node
          - coral-dev-debian-openjdk
          - coral-dev-debian-python
          - coral-dev-fedora
          - coral-dev-fedora-golang
          - coral-dev-fedora-node
          - coral-dev-fedora-openjdk
          - coral-dev-fedora-python
          - coral-dev-ubuntu
          - coral-dev-ubuntu-golang
          - coral-dev-ubuntu-node
          - coral-dev-ubuntu-openjdk
          - coral-dev-ubuntu-python
          - generic-aarch64-alpine
          - generic-aarch64-alpine-golang
          - generic-aarch64-alpine-node
          - generic-aarch64-alpine-openjdk
          - generic-aarch64-alpine-python
          - generic-aarch64-debian
          - generic-aarch64-debian-golang
          - generic-aarch64-debian-node
          - generic-aarch64-debian-openjdk
          - generic-aarch64-debian-python
          - generic-aarch64-fedora
          - generic-aarch64-fedora-golang
          - generic-aarch64-fedora-node
          - generic-aarch64-fedora-openjdk
          - generic-aarch64-fedora-python
          - generic-aarch64-ubuntu
          - generic-aarch64-ubuntu-golang
          - generic-aarch64-ubuntu-node
          - generic-aarch64-ubuntu-openjdk
          - generic-aarch64-ubuntu-python
          - jetson-nano-alpine
          - jetson-nano-alpine-golang
          - jetson-nano-alpine-node
          - jetson-nano-alpine-openjdk
          - jetson-nano-alpine-python
          - jetson-nano-debian
          - jetson-nano-debian-golang
          - jetson-nano-debian-node
          - jetson-nano-debian-openjdk
          - jetson-nano-debian-python
          - jetson-nano-fedora
          - jetson-nano-fedora-golang
          - jetson-nano-fedora-node
          - jetson-nano-fedora-openjdk
          - jetson-nano-fedora-python
          - jetson-nano-ubuntu
          - jetson-nano-ubuntu-golang
          - jetson-nano-ubuntu-node
          - jetson-nano-ubuntu-openjdk
          - jetson-nano-ubuntu-python
          - jetson-orin-alpine
          - jetson-orin-alpine-golang
          - jetson-orin-alpine-node
          - jetson-orin-alpine-openjdk
          - jetson-orin-alpine-python
          - jetson-orin-debian
          - jetson-orin-debian-golang
          - jetson-orin-debian-node
          - jetson-orin-debian-openjdk
          - jetson-orin-debian-python
          - jetson-orin-fedora
          - jetson-orin-fedora-golang
          - jetson-orin-fedora-node
          - jetson-orin-fedora-openjdk
          - jetson-orin-fedora-python
          - jetson-orin-ubuntu
          - jetson-orin-ubuntu-golang
          - jetson-orin-ubuntu-node
          - jetson-orin-ubuntu-openjdk
          - jetson-orin-ubuntu-python
          - jetson-tx2-alpine
          - jetson-tx2-alpine-golang
          - jetson-tx2-alpine-node
          - jetson-tx2-alpine-openjdk
          - jetson-tx2-alpine-python
          - jetson-tx2-debian
          - jetson-tx2-debian-golang
          - jetson-tx2-debian-node
          - jetson-tx2-debian-openjdk
          - jetson-tx2-debian-python
          - jetson-tx2-fedora
          - jetson-tx2-fedora-golang
          - jetson-tx2-fedora-node
          - jetson-tx2-fedora-openjdk
          - jetson-tx2-fedora-python
          - jetson-tx2-ubuntu
          - jetson-tx2-ubuntu-golang
          - jetson-tx2-ubuntu-node
          - jetson-tx2-ubuntu-openjdk
          - jetson-tx2-ubuntu-python
          - jetson-xavier-alpine
          - jetson-xavier-alpine-golang
          - jetson-xavier-alpine-node
          - jetson-xavier-alpine-openjdk
          - jetson-xavier-alpine-python
          - jetson-xavier-debian
          - jetson-xavier-debian-golang
          - jetson-xavier-debian-node
          - jetson-xavier-debian-openjdk
          - jetson-xavier-debian-python
          - jetson-xavier-fedora
          - jetson-xavier-fedora-golang
          - jetson-xavier-fedora-node
          - jetson-xavier-fedora-openjdk
          - jetson-xavier-fedora-python
          - jetson-xavier-ubuntu
          - jetson-xavier-ubuntu-golang
          - jetson-xavier-ubuntu-node
          - jetson-xavier-ubuntu-openjdk
          - jetson-xavier-ubuntu-python
          - raspberrypi-aarch64-alpine
          - raspberrypi-aarch64-alpine-golang
          - raspberrypi-aarch64-alpine-node
          - raspberrypi-aarch64-alpine-openjdk
          - raspberrypi-aarch64-alpine-python
          - raspberrypi-aarch64-debian
          - raspberrypi-aarch64-debian-golang
          - raspberrypi-aarch64-debian-node
          - raspberrypi-aarch64-debian-openjdk
          - raspberrypi-aarch64-debian-python
          - raspberrypi-aarch64-fedora
          - raspberrypi-aarch64-fedora-golang
          - raspberrypi-aarch64-fedora-node
          - raspberrypi-aarch64-fedora-openjdk
          - raspberrypi-aarch64-fedora-python
          - raspberrypi-aarch64-ubuntu
          - raspberrypi-aarch64-ubuntu-golang
          - raspberrypi-aarch64-ubuntu-node
          - raspberrypi-aarch64-ubuntu-openjdk
          - raspberrypi-aarch64-ubuntu-python
      namespaces:
        description: Space separated list of image namespaces to act upon
        required: true
        type: string
        default: balenalib
      include_dependents:
        description: Whether to build jobs that depend on the target job
        required: true
        type: boolean
        default: true
      no_build:
        description: Don't build, print what would build
        required: false
        type: boolean
        default: false
      no_push:
        description: Don't push, print what would push
        required: false
        type: boolean
        default: false
concurrency:
  group: ${{ github.workflow }}-${{ inputs.namespaces }}
  cancel-in-progress: true
jobs:
  aarch64-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs: []
    if: inputs.target_job == 'aarch64-alpine' || inputs.target_job == 'all' || inputs.target_job == 'aarch64-alpine-golang' || inputs.target_job == 'aarch64-alpine-node' || inputs.target_job == 'aarch64-alpine-openjdk' || inputs.target_job == 'aarch64-alpine-python' || inputs.target_job == 'coral-dev-alpine' || inputs.target_job == 'generic-aarch64-alpine' || inputs.target_job == 'jetson-orin-alpine' || inputs.target_job == 'jetson-nano-alpine' || inputs.target_job == 'jetson-tx2-alpine' || inputs.target_job == 'jetson-xavier-alpine' || inputs.target_job == 'raspberrypi-aarch64-alpine'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'aarch64-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'aarch64-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'aarch64-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'aarch64-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs: []
    if: inputs.target_job == 'aarch64-debian' || inputs.target_job == 'all' || inputs.target_job == 'aarch64-debian-golang' || inputs.target_job == 'aarch64-debian-node' || inputs.target_job == 'aarch64-debian-openjdk' || inputs.target_job == 'aarch64-debian-python' || inputs.target_job == 'coral-dev-debian' || inputs.target_job == 'generic-aarch64-debian' || inputs.target_job == 'jetson-orin-debian' || inputs.target_job == 'jetson-nano-debian' || inputs.target_job == 'jetson-tx2-debian' || inputs.target_job == 'jetson-xavier-debian' || inputs.target_job == 'raspberrypi-aarch64-debian'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'aarch64-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'aarch64-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'aarch64-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'aarch64-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs: []
    if: inputs.target_job == 'aarch64-fedora' || inputs.target_job == 'all' || inputs.target_job == 'aarch64-fedora-golang' || inputs.target_job == 'aarch64-fedora-node' || inputs.target_job == 'aarch64-fedora-openjdk' || inputs.target_job == 'aarch64-fedora-python' || inputs.target_job == 'coral-dev-fedora' || inputs.target_job == 'generic-aarch64-fedora' || inputs.target_job == 'jetson-orin-fedora' || inputs.target_job == 'jetson-nano-fedora' || inputs.target_job == 'jetson-tx2-fedora' || inputs.target_job == 'jetson-xavier-fedora' || inputs.target_job == 'raspberrypi-aarch64-fedora'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'aarch64-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'aarch64-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'aarch64-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'aarch64-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs: []
    if: inputs.target_job == 'aarch64-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'aarch64-ubuntu-golang' || inputs.target_job == 'aarch64-ubuntu-node' || inputs.target_job == 'aarch64-ubuntu-openjdk' || inputs.target_job == 'aarch64-ubuntu-python' || inputs.target_job == 'coral-dev-ubuntu' || inputs.target_job == 'generic-aarch64-ubuntu' || inputs.target_job == 'jetson-orin-ubuntu' || inputs.target_job == 'jetson-nano-ubuntu' || inputs.target_job == 'jetson-tx2-ubuntu' || inputs.target_job == 'jetson-xavier-ubuntu' || inputs.target_job == 'raspberrypi-aarch64-ubuntu'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'aarch64-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'aarch64-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'aarch64-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  aarch64-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'aarch64-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "aarch64-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'coral-dev-alpine' || inputs.target_job == 'all' || inputs.target_job == 'coral-dev-alpine-golang' || inputs.target_job == 'coral-dev-alpine-node' || inputs.target_job == 'coral-dev-alpine-openjdk' || inputs.target_job == 'coral-dev-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-alpine
    if: inputs.target_job == 'coral-dev-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-alpine
    if: inputs.target_job == 'coral-dev-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-alpine
    if: inputs.target_job == 'coral-dev-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-alpine
    if: inputs.target_job == 'coral-dev-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'coral-dev-debian' || inputs.target_job == 'all' || inputs.target_job == 'coral-dev-debian-golang' || inputs.target_job == 'coral-dev-debian-node' || inputs.target_job == 'coral-dev-debian-openjdk' || inputs.target_job == 'coral-dev-debian-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-debian
    if: inputs.target_job == 'coral-dev-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-debian
    if: inputs.target_job == 'coral-dev-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-debian
    if: inputs.target_job == 'coral-dev-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-debian
    if: inputs.target_job == 'coral-dev-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'coral-dev-fedora' || inputs.target_job == 'all' || inputs.target_job == 'coral-dev-fedora-golang' || inputs.target_job == 'coral-dev-fedora-node' || inputs.target_job == 'coral-dev-fedora-openjdk' || inputs.target_job == 'coral-dev-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-fedora
    if: inputs.target_job == 'coral-dev-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-fedora
    if: inputs.target_job == 'coral-dev-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-fedora
    if: inputs.target_job == 'coral-dev-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-fedora
    if: inputs.target_job == 'coral-dev-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'coral-dev-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'coral-dev-ubuntu-golang' || inputs.target_job == 'coral-dev-ubuntu-node' || inputs.target_job == 'coral-dev-ubuntu-openjdk' || inputs.target_job == 'coral-dev-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-ubuntu
    if: inputs.target_job == 'coral-dev-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-ubuntu
    if: inputs.target_job == 'coral-dev-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-ubuntu
    if: inputs.target_job == 'coral-dev-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  coral-dev-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - coral-dev-ubuntu
    if: inputs.target_job == 'coral-dev-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'coral-dev-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "coral-dev-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'generic-aarch64-alpine' || inputs.target_job == 'all' || inputs.target_job == 'generic-aarch64-alpine-golang' || inputs.target_job == 'generic-aarch64-alpine-node' || inputs.target_job == 'generic-aarch64-alpine-openjdk' || inputs.target_job == 'generic-aarch64-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-alpine
    if: inputs.target_job == 'generic-aarch64-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-alpine
    if: inputs.target_job == 'generic-aarch64-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-alpine
    if: inputs.target_job == 'generic-aarch64-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-alpine
    if: inputs.target_job == 'generic-aarch64-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'generic-aarch64-debian' || inputs.target_job == 'all' || inputs.target_job == 'generic-aarch64-debian-golang' || inputs.target_job == 'generic-aarch64-debian-node' || inputs.target_job == 'generic-aarch64-debian-openjdk' || inputs.target_job == 'generic-aarch64-debian-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-debian
    if: inputs.target_job == 'generic-aarch64-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-debian
    if: inputs.target_job == 'generic-aarch64-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-debian
    if: inputs.target_job == 'generic-aarch64-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-debian
    if: inputs.target_job == 'generic-aarch64-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'generic-aarch64-fedora' || inputs.target_job == 'all' || inputs.target_job == 'generic-aarch64-fedora-golang' || inputs.target_job == 'generic-aarch64-fedora-node' || inputs.target_job == 'generic-aarch64-fedora-openjdk' || inputs.target_job == 'generic-aarch64-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-fedora
    if: inputs.target_job == 'generic-aarch64-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-fedora
    if: inputs.target_job == 'generic-aarch64-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-fedora
    if: inputs.target_job == 'generic-aarch64-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-fedora
    if: inputs.target_job == 'generic-aarch64-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'generic-aarch64-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'generic-aarch64-ubuntu-golang' || inputs.target_job == 'generic-aarch64-ubuntu-node' || inputs.target_job == 'generic-aarch64-ubuntu-openjdk' || inputs.target_job == 'generic-aarch64-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-ubuntu
    if: inputs.target_job == 'generic-aarch64-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-ubuntu
    if: inputs.target_job == 'generic-aarch64-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-ubuntu
    if: inputs.target_job == 'generic-aarch64-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-aarch64-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-aarch64-ubuntu
    if: inputs.target_job == 'generic-aarch64-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-aarch64-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "generic-aarch64-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="owa5x imx8mm-var-som tdpzu9 radxa-zero nanopi-r2s rockpro64 nanopi-r2c cnx100-xavier-nx isg-503 n310-tx2 photon-tx2-nx rockpi-4b-rk3399 asus-tinker-edge-t photon-nano smarc-px30 ccimx8x-sbc-pro astro-tx2 photon-xavier-nx imx8mm-var-dart-nrt imx8mm-var-dart-plt skx2 imx8mm-var-dart nitrogen8mm-dwe jn30b-nano j120-tx2 nitrogen8mm nanopc-t4 blackboard-tx2 srd3-tx2 n510-tx2 artik710 kitra710 orbitty-tx2 spacely-tx2 cl-som-imx8 imx8m-var-dart iot-gate-imx8 iot-gate-imx8plus" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'jetson-orin-alpine' || inputs.target_job == 'all' || inputs.target_job == 'jetson-orin-alpine-golang' || inputs.target_job == 'jetson-orin-alpine-node' || inputs.target_job == 'jetson-orin-alpine-openjdk' || inputs.target_job == 'jetson-orin-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-alpine
    if: inputs.target_job == 'jetson-orin-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-alpine
    if: inputs.target_job == 'jetson-orin-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-alpine
    if: inputs.target_job == 'jetson-orin-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-alpine
    if: inputs.target_job == 'jetson-orin-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'jetson-orin-debian' || inputs.target_job == 'all' || inputs.target_job == 'jetson-orin-debian-golang' || inputs.target_job == 'jetson-orin-debian-node' || inputs.target_job == 'jetson-orin-debian-openjdk' || inputs.target_job == 'jetson-orin-debian-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-debian
    if: inputs.target_job == 'jetson-orin-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-debian
    if: inputs.target_job == 'jetson-orin-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-debian
    if: inputs.target_job == 'jetson-orin-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-debian
    if: inputs.target_job == 'jetson-orin-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'jetson-orin-fedora' || inputs.target_job == 'all' || inputs.target_job == 'jetson-orin-fedora-golang' || inputs.target_job == 'jetson-orin-fedora-node' || inputs.target_job == 'jetson-orin-fedora-openjdk' || inputs.target_job == 'jetson-orin-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-fedora
    if: inputs.target_job == 'jetson-orin-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-fedora
    if: inputs.target_job == 'jetson-orin-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-fedora
    if: inputs.target_job == 'jetson-orin-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-fedora
    if: inputs.target_job == 'jetson-orin-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'jetson-orin-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'jetson-orin-ubuntu-golang' || inputs.target_job == 'jetson-orin-ubuntu-node' || inputs.target_job == 'jetson-orin-ubuntu-openjdk' || inputs.target_job == 'jetson-orin-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-ubuntu
    if: inputs.target_job == 'jetson-orin-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-ubuntu
    if: inputs.target_job == 'jetson-orin-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-ubuntu
    if: inputs.target_job == 'jetson-orin-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-orin-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-orin-ubuntu
    if: inputs.target_job == 'jetson-orin-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-orin-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-agx-orin-devkit-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-orin-nx-xavier-nx-devkit jetson-orin-nano-devkit-nvme" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'jetson-nano-alpine' || inputs.target_job == 'all' || inputs.target_job == 'jetson-nano-alpine-golang' || inputs.target_job == 'jetson-nano-alpine-node' || inputs.target_job == 'jetson-nano-alpine-openjdk' || inputs.target_job == 'jetson-nano-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-alpine
    if: inputs.target_job == 'jetson-nano-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-alpine
    if: inputs.target_job == 'jetson-nano-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-alpine
    if: inputs.target_job == 'jetson-nano-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-alpine
    if: inputs.target_job == 'jetson-nano-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'jetson-nano-debian' || inputs.target_job == 'all' || inputs.target_job == 'jetson-nano-debian-golang' || inputs.target_job == 'jetson-nano-debian-node' || inputs.target_job == 'jetson-nano-debian-openjdk' || inputs.target_job == 'jetson-nano-debian-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-debian
    if: inputs.target_job == 'jetson-nano-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-debian
    if: inputs.target_job == 'jetson-nano-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-debian
    if: inputs.target_job == 'jetson-nano-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-debian
    if: inputs.target_job == 'jetson-nano-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'jetson-nano-fedora' || inputs.target_job == 'all' || inputs.target_job == 'jetson-nano-fedora-golang' || inputs.target_job == 'jetson-nano-fedora-node' || inputs.target_job == 'jetson-nano-fedora-openjdk' || inputs.target_job == 'jetson-nano-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-fedora
    if: inputs.target_job == 'jetson-nano-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-fedora
    if: inputs.target_job == 'jetson-nano-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-fedora
    if: inputs.target_job == 'jetson-nano-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-fedora
    if: inputs.target_job == 'jetson-nano-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'jetson-nano-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'jetson-nano-ubuntu-golang' || inputs.target_job == 'jetson-nano-ubuntu-node' || inputs.target_job == 'jetson-nano-ubuntu-openjdk' || inputs.target_job == 'jetson-nano-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-ubuntu
    if: inputs.target_job == 'jetson-nano-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-ubuntu
    if: inputs.target_job == 'jetson-nano-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-ubuntu
    if: inputs.target_job == 'jetson-nano-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-nano-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-nano-ubuntu
    if: inputs.target_job == 'jetson-nano-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-nano-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-nano-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-nano-2gb-devkit jetson-nano-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'jetson-tx2-alpine' || inputs.target_job == 'all' || inputs.target_job == 'jetson-tx2-alpine-golang' || inputs.target_job == 'jetson-tx2-alpine-node' || inputs.target_job == 'jetson-tx2-alpine-openjdk' || inputs.target_job == 'jetson-tx2-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-alpine
    if: inputs.target_job == 'jetson-tx2-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-alpine
    if: inputs.target_job == 'jetson-tx2-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-alpine
    if: inputs.target_job == 'jetson-tx2-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-alpine
    if: inputs.target_job == 'jetson-tx2-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'jetson-tx2-debian' || inputs.target_job == 'all' || inputs.target_job == 'jetson-tx2-debian-golang' || inputs.target_job == 'jetson-tx2-debian-node' || inputs.target_job == 'jetson-tx2-debian-openjdk' || inputs.target_job == 'jetson-tx2-debian-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-debian
    if: inputs.target_job == 'jetson-tx2-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-debian
    if: inputs.target_job == 'jetson-tx2-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-debian
    if: inputs.target_job == 'jetson-tx2-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-debian
    if: inputs.target_job == 'jetson-tx2-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'jetson-tx2-fedora' || inputs.target_job == 'all' || inputs.target_job == 'jetson-tx2-fedora-golang' || inputs.target_job == 'jetson-tx2-fedora-node' || inputs.target_job == 'jetson-tx2-fedora-openjdk' || inputs.target_job == 'jetson-tx2-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-fedora
    if: inputs.target_job == 'jetson-tx2-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-fedora
    if: inputs.target_job == 'jetson-tx2-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-fedora
    if: inputs.target_job == 'jetson-tx2-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-fedora
    if: inputs.target_job == 'jetson-tx2-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'jetson-tx2-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'jetson-tx2-ubuntu-golang' || inputs.target_job == 'jetson-tx2-ubuntu-node' || inputs.target_job == 'jetson-tx2-ubuntu-openjdk' || inputs.target_job == 'jetson-tx2-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-ubuntu
    if: inputs.target_job == 'jetson-tx2-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-ubuntu
    if: inputs.target_job == 'jetson-tx2-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-ubuntu
    if: inputs.target_job == 'jetson-tx2-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-tx2-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-tx2-ubuntu
    if: inputs.target_job == 'jetson-tx2-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-tx2-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-tx2-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="jetson-tx2-nx-devkit" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'jetson-xavier-alpine' || inputs.target_job == 'all' || inputs.target_job == 'jetson-xavier-alpine-golang' || inputs.target_job == 'jetson-xavier-alpine-node' || inputs.target_job == 'jetson-xavier-alpine-openjdk' || inputs.target_job == 'jetson-xavier-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-alpine
    if: inputs.target_job == 'jetson-xavier-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-alpine
    if: inputs.target_job == 'jetson-xavier-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-alpine
    if: inputs.target_job == 'jetson-xavier-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-alpine
    if: inputs.target_job == 'jetson-xavier-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'jetson-xavier-debian' || inputs.target_job == 'all' || inputs.target_job == 'jetson-xavier-debian-golang' || inputs.target_job == 'jetson-xavier-debian-node' || inputs.target_job == 'jetson-xavier-debian-openjdk' || inputs.target_job == 'jetson-xavier-debian-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-debian
    if: inputs.target_job == 'jetson-xavier-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-debian
    if: inputs.target_job == 'jetson-xavier-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-debian
    if: inputs.target_job == 'jetson-xavier-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-debian
    if: inputs.target_job == 'jetson-xavier-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'jetson-xavier-fedora' || inputs.target_job == 'all' || inputs.target_job == 'jetson-xavier-fedora-golang' || inputs.target_job == 'jetson-xavier-fedora-node' || inputs.target_job == 'jetson-xavier-fedora-openjdk' || inputs.target_job == 'jetson-xavier-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-fedora
    if: inputs.target_job == 'jetson-xavier-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-fedora
    if: inputs.target_job == 'jetson-xavier-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-fedora
    if: inputs.target_job == 'jetson-xavier-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-fedora
    if: inputs.target_job == 'jetson-xavier-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'jetson-xavier-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'jetson-xavier-ubuntu-golang' || inputs.target_job == 'jetson-xavier-ubuntu-node' || inputs.target_job == 'jetson-xavier-ubuntu-openjdk' || inputs.target_job == 'jetson-xavier-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-ubuntu
    if: inputs.target_job == 'jetson-xavier-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-ubuntu
    if: inputs.target_job == 'jetson-xavier-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-ubuntu
    if: inputs.target_job == 'jetson-xavier-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  jetson-xavier-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - jetson-xavier-ubuntu
    if: inputs.target_job == 'jetson-xavier-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'jetson-xavier-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "jetson-xavier-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="forecr-dsb-nx2-xavier-nx-emmc jetson-xavier-nx-devkit-seeed-2mic-hat jetson-xavier-nx-devkit jetson-xavier-nx-devkit-emmc" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-alpine
    if: inputs.target_job == 'raspberrypi-aarch64-alpine' || inputs.target_job == 'all' || inputs.target_job == 'raspberrypi-aarch64-alpine-golang' || inputs.target_job == 'raspberrypi-aarch64-alpine-node' || inputs.target_job == 'raspberrypi-aarch64-alpine-openjdk' || inputs.target_job == 'raspberrypi-aarch64-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-alpine
    if: inputs.target_job == 'raspberrypi-aarch64-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-alpine
    if: inputs.target_job == 'raspberrypi-aarch64-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-alpine
    if: inputs.target_job == 'raspberrypi-aarch64-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-alpine
    if: inputs.target_job == 'raspberrypi-aarch64-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-alpine' || inputs.target_job == 'aarch64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-debian
    if: inputs.target_job == 'raspberrypi-aarch64-debian' || inputs.target_job == 'all' || inputs.target_job == 'raspberrypi-aarch64-debian-golang' || inputs.target_job == 'raspberrypi-aarch64-debian-node' || inputs.target_job == 'raspberrypi-aarch64-debian-openjdk' || inputs.target_job == 'raspberrypi-aarch64-debian-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-debian
    if: inputs.target_job == 'raspberrypi-aarch64-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-debian
    if: inputs.target_job == 'raspberrypi-aarch64-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-debian
    if: inputs.target_job == 'raspberrypi-aarch64-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-debian
    if: inputs.target_job == 'raspberrypi-aarch64-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-debian' || inputs.target_job == 'aarch64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-fedora
    if: inputs.target_job == 'raspberrypi-aarch64-fedora' || inputs.target_job == 'all' || inputs.target_job == 'raspberrypi-aarch64-fedora-golang' || inputs.target_job == 'raspberrypi-aarch64-fedora-node' || inputs.target_job == 'raspberrypi-aarch64-fedora-openjdk' || inputs.target_job == 'raspberrypi-aarch64-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-fedora
    if: inputs.target_job == 'raspberrypi-aarch64-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-fedora
    if: inputs.target_job == 'raspberrypi-aarch64-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-fedora
    if: inputs.target_job == 'raspberrypi-aarch64-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-fedora
    if: inputs.target_job == 'raspberrypi-aarch64-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-fedora' || inputs.target_job == 'aarch64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - aarch64-ubuntu
    if: inputs.target_job == 'raspberrypi-aarch64-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'raspberrypi-aarch64-ubuntu-golang' || inputs.target_job == 'raspberrypi-aarch64-ubuntu-node' || inputs.target_job == 'raspberrypi-aarch64-ubuntu-openjdk' || inputs.target_job == 'raspberrypi-aarch64-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-ubuntu
    if: inputs.target_job == 'raspberrypi-aarch64-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-ubuntu
    if: inputs.target_job == 'raspberrypi-aarch64-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-ubuntu
    if: inputs.target_job == 'raspberrypi-aarch64-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  raspberrypi-aarch64-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - raspberrypi-aarch64-ubuntu
    if: inputs.target_job == 'raspberrypi-aarch64-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'raspberrypi-aarch64-ubuntu' || inputs.target_job == 'aarch64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "raspberrypi3-64-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/arm64" --alias="radxa-cm3-rpicm4-ioboard raspberrypi0-2w-64 raspberrypicm4-ioboard raspberrypi400-64 raspberrypi4-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
