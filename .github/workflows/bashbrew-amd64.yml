# DO NOT EDIT MANUALLY - This file is auto-generated from bashbrew.json

name: Bashbrew (amd64)
'on':
  schedule:
    - cron: 45 3 6 * *
  workflow_dispatch:
    inputs:
      target_job:
        description: Target job to run
        required: true
        type: choice
        default: all
        options:
          - all
          - amd64-alpine
          - amd64-alpine-golang
          - amd64-alpine-node
          - amd64-alpine-openjdk
          - amd64-alpine-python
          - amd64-debian
          - amd64-debian-dotnet
          - amd64-debian-golang
          - amd64-debian-node
          - amd64-debian-openjdk
          - amd64-debian-python
          - amd64-fedora
          - amd64-fedora-golang
          - amd64-fedora-node
          - amd64-fedora-openjdk
          - amd64-fedora-python
          - amd64-ubuntu
          - amd64-ubuntu-dotnet
          - amd64-ubuntu-golang
          - amd64-ubuntu-node
          - amd64-ubuntu-openjdk
          - amd64-ubuntu-python
          - generic-amd64-alpine
          - generic-amd64-alpine-golang
          - generic-amd64-alpine-node
          - generic-amd64-alpine-openjdk
          - generic-amd64-alpine-python
          - generic-amd64-debian
          - generic-amd64-debian-dotnet
          - generic-amd64-debian-golang
          - generic-amd64-debian-node
          - generic-amd64-debian-openjdk
          - generic-amd64-debian-python
          - generic-amd64-fedora
          - generic-amd64-fedora-golang
          - generic-amd64-fedora-node
          - generic-amd64-fedora-openjdk
          - generic-amd64-fedora-python
          - generic-amd64-ubuntu
          - generic-amd64-ubuntu-dotnet
          - generic-amd64-ubuntu-golang
          - generic-amd64-ubuntu-node
          - generic-amd64-ubuntu-openjdk
          - generic-amd64-ubuntu-python
          - up-board-alpine
          - up-board-alpine-golang
          - up-board-alpine-node
          - up-board-alpine-openjdk
          - up-board-alpine-python
          - up-board-debian
          - up-board-debian-dotnet
          - up-board-debian-golang
          - up-board-debian-node
          - up-board-debian-openjdk
          - up-board-debian-python
          - up-board-fedora
          - up-board-fedora-golang
          - up-board-fedora-node
          - up-board-fedora-openjdk
          - up-board-fedora-python
          - up-board-ubuntu
          - up-board-ubuntu-dotnet
          - up-board-ubuntu-golang
          - up-board-ubuntu-node
          - up-board-ubuntu-openjdk
          - up-board-ubuntu-python
      namespaces:
        description: Space separated list of image namespaces to act upon
        required: true
        type: string
        default: balenalib
      include_dependents:
        description: Whether to build jobs that depend on the target job
        required: true
        type: boolean
        default: true
      no_build:
        description: Don't build, print what would build
        required: false
        type: boolean
        default: false
      no_push:
        description: Don't push, print what would push
        required: false
        type: boolean
        default: false
concurrency:
  group: ${{ github.workflow }}-${{ inputs.namespaces }}
  cancel-in-progress: true
jobs:
  amd64-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs: []
    if: inputs.target_job == 'amd64-alpine' || inputs.target_job == 'all' || inputs.target_job == 'amd64-alpine-golang' || inputs.target_job == 'amd64-alpine-node' || inputs.target_job == 'amd64-alpine-openjdk' || inputs.target_job == 'amd64-alpine-python' || inputs.target_job == 'generic-amd64-alpine' || inputs.target_job == 'up-board-alpine'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-alpine
    if: inputs.target_job == 'amd64-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-alpine
    if: inputs.target_job == 'amd64-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-alpine
    if: inputs.target_job == 'amd64-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-alpine
    if: inputs.target_job == 'amd64-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs: []
    if: inputs.target_job == 'amd64-debian' || inputs.target_job == 'all' || inputs.target_job == 'amd64-debian-dotnet' || inputs.target_job == 'amd64-debian-golang' || inputs.target_job == 'amd64-debian-node' || inputs.target_job == 'amd64-debian-openjdk' || inputs.target_job == 'amd64-debian-python' || inputs.target_job == 'generic-amd64-debian' || inputs.target_job == 'up-board-debian'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-debian-dotnet:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-debian
    if: inputs.target_job == 'amd64-debian-dotnet' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-debian-dotnet" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-debian
    if: inputs.target_job == 'amd64-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-debian
    if: inputs.target_job == 'amd64-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-debian
    if: inputs.target_job == 'amd64-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-debian
    if: inputs.target_job == 'amd64-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs: []
    if: inputs.target_job == 'amd64-fedora' || inputs.target_job == 'all' || inputs.target_job == 'amd64-fedora-golang' || inputs.target_job == 'amd64-fedora-node' || inputs.target_job == 'amd64-fedora-openjdk' || inputs.target_job == 'amd64-fedora-python' || inputs.target_job == 'generic-amd64-fedora' || inputs.target_job == 'up-board-fedora'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-fedora
    if: inputs.target_job == 'amd64-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-fedora
    if: inputs.target_job == 'amd64-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-fedora
    if: inputs.target_job == 'amd64-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-fedora
    if: inputs.target_job == 'amd64-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs: []
    if: inputs.target_job == 'amd64-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'amd64-ubuntu-dotnet' || inputs.target_job == 'amd64-ubuntu-golang' || inputs.target_job == 'amd64-ubuntu-node' || inputs.target_job == 'amd64-ubuntu-openjdk' || inputs.target_job == 'amd64-ubuntu-python' || inputs.target_job == 'generic-amd64-ubuntu' || inputs.target_job == 'up-board-ubuntu'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-ubuntu-dotnet:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-ubuntu
    if: inputs.target_job == 'amd64-ubuntu-dotnet' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-ubuntu-dotnet" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-ubuntu
    if: inputs.target_job == 'amd64-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-ubuntu
    if: inputs.target_job == 'amd64-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-ubuntu
    if: inputs.target_job == 'amd64-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  amd64-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-ubuntu
    if: inputs.target_job == 'amd64-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "amd64-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-alpine
    if: inputs.target_job == 'generic-amd64-alpine' || inputs.target_job == 'all' || inputs.target_job == 'generic-amd64-alpine-golang' || inputs.target_job == 'generic-amd64-alpine-node' || inputs.target_job == 'generic-amd64-alpine-openjdk' || inputs.target_job == 'generic-amd64-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-alpine
    if: inputs.target_job == 'generic-amd64-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-alpine' || inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-alpine
    if: inputs.target_job == 'generic-amd64-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-alpine' || inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-alpine
    if: inputs.target_job == 'generic-amd64-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-alpine' || inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-alpine
    if: inputs.target_job == 'generic-amd64-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-alpine' || inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-debian
    if: inputs.target_job == 'generic-amd64-debian' || inputs.target_job == 'all' || inputs.target_job == 'generic-amd64-debian-dotnet' || inputs.target_job == 'generic-amd64-debian-golang' || inputs.target_job == 'generic-amd64-debian-node' || inputs.target_job == 'generic-amd64-debian-openjdk' || inputs.target_job == 'generic-amd64-debian-python' || (inputs.include_dependents && (inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-debian-dotnet:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-debian
    if: inputs.target_job == 'generic-amd64-debian-dotnet' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-debian-dotnet" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-debian
    if: inputs.target_job == 'generic-amd64-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-debian
    if: inputs.target_job == 'generic-amd64-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-debian
    if: inputs.target_job == 'generic-amd64-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-debian
    if: inputs.target_job == 'generic-amd64-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-fedora
    if: inputs.target_job == 'generic-amd64-fedora' || inputs.target_job == 'all' || inputs.target_job == 'generic-amd64-fedora-golang' || inputs.target_job == 'generic-amd64-fedora-node' || inputs.target_job == 'generic-amd64-fedora-openjdk' || inputs.target_job == 'generic-amd64-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-fedora
    if: inputs.target_job == 'generic-amd64-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-fedora' || inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-fedora
    if: inputs.target_job == 'generic-amd64-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-fedora' || inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-fedora
    if: inputs.target_job == 'generic-amd64-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-fedora' || inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-fedora
    if: inputs.target_job == 'generic-amd64-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-fedora' || inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-ubuntu
    if: inputs.target_job == 'generic-amd64-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'generic-amd64-ubuntu-dotnet' || inputs.target_job == 'generic-amd64-ubuntu-golang' || inputs.target_job == 'generic-amd64-ubuntu-node' || inputs.target_job == 'generic-amd64-ubuntu-openjdk' || inputs.target_job == 'generic-amd64-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-ubuntu-dotnet:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-ubuntu
    if: inputs.target_job == 'generic-amd64-ubuntu-dotnet' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-ubuntu-dotnet" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-ubuntu
    if: inputs.target_job == 'generic-amd64-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-ubuntu
    if: inputs.target_job == 'generic-amd64-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-ubuntu
    if: inputs.target_job == 'generic-amd64-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  generic-amd64-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - generic-amd64-ubuntu
    if: inputs.target_job == 'generic-amd64-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'generic-amd64-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "intel-nuc-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" --alias="generic-amd64 odyssey-x86 generic-amd64-fde generic genericx86-64-ext surface-go up-core up-core-plus up-squared surface-pro-6 qemux86-64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-alpine:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-alpine
    if: inputs.target_job == 'up-board-alpine' || inputs.target_job == 'all' || inputs.target_job == 'up-board-alpine-golang' || inputs.target_job == 'up-board-alpine-node' || inputs.target_job == 'up-board-alpine-openjdk' || inputs.target_job == 'up-board-alpine-python' || (inputs.include_dependents && (inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-alpine" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-alpine-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-alpine
    if: inputs.target_job == 'up-board-alpine-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-alpine' || inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-alpine-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-alpine-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-alpine
    if: inputs.target_job == 'up-board-alpine-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-alpine' || inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-alpine-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-alpine-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-alpine
    if: inputs.target_job == 'up-board-alpine-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-alpine' || inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-alpine-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-alpine-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-alpine
    if: inputs.target_job == 'up-board-alpine-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-alpine' || inputs.target_job == 'amd64-alpine'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-alpine-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-debian:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-debian
    if: inputs.target_job == 'up-board-debian' || inputs.target_job == 'all' || inputs.target_job == 'up-board-debian-dotnet' || inputs.target_job == 'up-board-debian-golang' || inputs.target_job == 'up-board-debian-node' || inputs.target_job == 'up-board-debian-openjdk' || inputs.target_job == 'up-board-debian-python' || (inputs.include_dependents && (inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-debian" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-debian-dotnet:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-debian
    if: inputs.target_job == 'up-board-debian-dotnet' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-debian-dotnet" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-debian-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-debian
    if: inputs.target_job == 'up-board-debian-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-debian-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-debian-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-debian
    if: inputs.target_job == 'up-board-debian-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-debian-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-debian-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-debian
    if: inputs.target_job == 'up-board-debian-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-debian-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-debian-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-debian
    if: inputs.target_job == 'up-board-debian-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-debian' || inputs.target_job == 'amd64-debian'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-debian-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-fedora:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-fedora
    if: inputs.target_job == 'up-board-fedora' || inputs.target_job == 'all' || inputs.target_job == 'up-board-fedora-golang' || inputs.target_job == 'up-board-fedora-node' || inputs.target_job == 'up-board-fedora-openjdk' || inputs.target_job == 'up-board-fedora-python' || (inputs.include_dependents && (inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-fedora" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-fedora-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-fedora
    if: inputs.target_job == 'up-board-fedora-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-fedora' || inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-fedora-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-fedora-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-fedora
    if: inputs.target_job == 'up-board-fedora-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-fedora' || inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-fedora-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-fedora-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-fedora
    if: inputs.target_job == 'up-board-fedora-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-fedora' || inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-fedora-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-fedora-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-fedora
    if: inputs.target_job == 'up-board-fedora-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-fedora' || inputs.target_job == 'amd64-fedora'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-fedora-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-ubuntu:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - amd64-ubuntu
    if: inputs.target_job == 'up-board-ubuntu' || inputs.target_job == 'all' || inputs.target_job == 'up-board-ubuntu-dotnet' || inputs.target_job == 'up-board-ubuntu-golang' || inputs.target_job == 'up-board-ubuntu-node' || inputs.target_job == 'up-board-ubuntu-openjdk' || inputs.target_job == 'up-board-ubuntu-python' || (inputs.include_dependents && (inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-ubuntu" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-ubuntu-dotnet:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-ubuntu
    if: inputs.target_job == 'up-board-ubuntu-dotnet' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-ubuntu-dotnet" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-ubuntu-golang:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-ubuntu
    if: inputs.target_job == 'up-board-ubuntu-golang' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-ubuntu-golang" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-ubuntu-node:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-ubuntu
    if: inputs.target_job == 'up-board-ubuntu-node' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-ubuntu-node" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-ubuntu-openjdk:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-ubuntu
    if: inputs.target_job == 'up-board-ubuntu-openjdk' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-ubuntu-openjdk" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
  up-board-ubuntu-python:
    runs-on:
      - self-hosted
      - base-images
      - X64
    timeout-minutes: 480
    needs:
      - up-board-ubuntu
    if: inputs.target_job == 'up-board-ubuntu-python' || inputs.target_job == 'all' || (inputs.include_dependents && (inputs.target_job == 'up-board-ubuntu' || inputs.target_job == 'amd64-ubuntu'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Disable build
        if: ${{ inputs.no_build }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-build" >> $GITHUB_ENV
      - name: Disable push
        if: ${{ inputs.no_push }}
        run: echo "EXTRA_OPTS=$EXTRA_OPTS --no-push" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.BALENAIMAGES_USER }}
          password: ${{ secrets.BALENAIMAGES_TOKEN }}
      - name: Run bashbrew build
        working-directory: bashbrew
        run: ./bashbrew.sh build "up-board-ubuntu-python" --src=$(pwd)/src --logs=$(pwd)/logs --library=$(pwd)/../library --namespaces="${{ inputs.namespaces }}" --platform="linux/amd64" $EXTRA_OPTS
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: bashbrew/logs/
          retention-days: 90
